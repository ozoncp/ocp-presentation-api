// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-presentation-api/internal/repo/presentation (interfaces: Repo)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozoncp/ocp-presentation-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreatePresentation mocks base method.
func (m *MockRepo) CreatePresentation(arg0 context.Context, arg1 model.Presentation) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePresentation", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePresentation indicates an expected call of CreatePresentation.
func (mr *MockRepoMockRecorder) CreatePresentation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresentation", reflect.TypeOf((*MockRepo)(nil).CreatePresentation), arg0, arg1)
}

// DescribePresentation mocks base method.
func (m *MockRepo) DescribePresentation(arg0 context.Context, arg1 uint64) (*model.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePresentation", arg0, arg1)
	ret0, _ := ret[0].(*model.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePresentation indicates an expected call of DescribePresentation.
func (mr *MockRepoMockRecorder) DescribePresentation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePresentation", reflect.TypeOf((*MockRepo)(nil).DescribePresentation), arg0, arg1)
}

// ListPresentations mocks base method.
func (m *MockRepo) ListPresentations(arg0 context.Context, arg1, arg2 uint64) ([]model.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPresentations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPresentations indicates an expected call of ListPresentations.
func (mr *MockRepoMockRecorder) ListPresentations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPresentations", reflect.TypeOf((*MockRepo)(nil).ListPresentations), arg0, arg1, arg2)
}

// MultiCreatePresentations mocks base method.
func (m *MockRepo) MultiCreatePresentations(arg0 context.Context, arg1 []model.Presentation) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiCreatePresentations", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiCreatePresentations indicates an expected call of MultiCreatePresentations.
func (mr *MockRepoMockRecorder) MultiCreatePresentations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiCreatePresentations", reflect.TypeOf((*MockRepo)(nil).MultiCreatePresentations), arg0, arg1)
}

// RemovePresentation mocks base method.
func (m *MockRepo) RemovePresentation(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePresentation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePresentation indicates an expected call of RemovePresentation.
func (mr *MockRepoMockRecorder) RemovePresentation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePresentation", reflect.TypeOf((*MockRepo)(nil).RemovePresentation), arg0, arg1)
}

// UpdatePresentation mocks base method.
func (m *MockRepo) UpdatePresentation(arg0 context.Context, arg1 model.Presentation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePresentation", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePresentation indicates an expected call of UpdatePresentation.
func (mr *MockRepoMockRecorder) UpdatePresentation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePresentation", reflect.TypeOf((*MockRepo)(nil).UpdatePresentation), arg0, arg1)
}
