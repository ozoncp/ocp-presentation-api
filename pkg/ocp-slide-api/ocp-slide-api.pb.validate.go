// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-slide-api/ocp-slide-api.proto

package ocp_slide_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateSlideV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSlideV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlide() == nil {
		return CreateSlideV1RequestValidationError{
			field:  "Slide",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSlide()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSlideV1RequestValidationError{
				field:  "Slide",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateSlideV1RequestValidationError is the validation error returned by
// CreateSlideV1Request.Validate if the designated constraints aren't met.
type CreateSlideV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSlideV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSlideV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSlideV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSlideV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSlideV1RequestValidationError) ErrorName() string {
	return "CreateSlideV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSlideV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSlideV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSlideV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSlideV1RequestValidationError{}

// Validate checks the field values on CreateSlideV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSlideV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SlideId

	return nil
}

// CreateSlideV1ResponseValidationError is the validation error returned by
// CreateSlideV1Response.Validate if the designated constraints aren't met.
type CreateSlideV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSlideV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSlideV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSlideV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSlideV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSlideV1ResponseValidationError) ErrorName() string {
	return "CreateSlideV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSlideV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSlideV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSlideV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSlideV1ResponseValidationError{}

// Validate checks the field values on MultiCreateSlidesV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateSlidesV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSlides()); l < 1 || l > 1024 {
		return MultiCreateSlidesV1RequestValidationError{
			field:  "Slides",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
	}

	for idx, item := range m.GetSlides() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateSlidesV1RequestValidationError{
					field:  fmt.Sprintf("Slides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateSlidesV1RequestValidationError is the validation error returned
// by MultiCreateSlidesV1Request.Validate if the designated constraints aren't met.
type MultiCreateSlidesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateSlidesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateSlidesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateSlidesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateSlidesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateSlidesV1RequestValidationError) ErrorName() string {
	return "MultiCreateSlidesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateSlidesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateSlidesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateSlidesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateSlidesV1RequestValidationError{}

// Validate checks the field values on MultiCreateSlidesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateSlidesV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NumberOfCreatedSlides

	return nil
}

// MultiCreateSlidesV1ResponseValidationError is the validation error returned
// by MultiCreateSlidesV1Response.Validate if the designated constraints
// aren't met.
type MultiCreateSlidesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateSlidesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateSlidesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateSlidesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateSlidesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateSlidesV1ResponseValidationError) ErrorName() string {
	return "MultiCreateSlidesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateSlidesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateSlidesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateSlidesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateSlidesV1ResponseValidationError{}

// Validate checks the field values on UpdateSlideV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSlideV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlide() == nil {
		return UpdateSlideV1RequestValidationError{
			field:  "Slide",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSlide()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSlideV1RequestValidationError{
				field:  "Slide",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSlideV1RequestValidationError is the validation error returned by
// UpdateSlideV1Request.Validate if the designated constraints aren't met.
type UpdateSlideV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSlideV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSlideV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSlideV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSlideV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSlideV1RequestValidationError) ErrorName() string {
	return "UpdateSlideV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSlideV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSlideV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSlideV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSlideV1RequestValidationError{}

// Validate checks the field values on UpdateSlideV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSlideV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// UpdateSlideV1ResponseValidationError is the validation error returned by
// UpdateSlideV1Response.Validate if the designated constraints aren't met.
type UpdateSlideV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSlideV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSlideV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSlideV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSlideV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSlideV1ResponseValidationError) ErrorName() string {
	return "UpdateSlideV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSlideV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSlideV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSlideV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSlideV1ResponseValidationError{}

// Validate checks the field values on DescribeSlideV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeSlideV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlideId() < 1 {
		return DescribeSlideV1RequestValidationError{
			field:  "SlideId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// DescribeSlideV1RequestValidationError is the validation error returned by
// DescribeSlideV1Request.Validate if the designated constraints aren't met.
type DescribeSlideV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSlideV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSlideV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSlideV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSlideV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSlideV1RequestValidationError) ErrorName() string {
	return "DescribeSlideV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSlideV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSlideV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSlideV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSlideV1RequestValidationError{}

// Validate checks the field values on DescribeSlideV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeSlideV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSlide()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeSlideV1ResponseValidationError{
				field:  "Slide",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeSlideV1ResponseValidationError is the validation error returned by
// DescribeSlideV1Response.Validate if the designated constraints aren't met.
type DescribeSlideV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeSlideV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeSlideV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeSlideV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeSlideV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeSlideV1ResponseValidationError) ErrorName() string {
	return "DescribeSlideV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeSlideV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeSlideV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeSlideV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeSlideV1ResponseValidationError{}

// Validate checks the field values on ListSlidesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSlidesV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLimit(); val < 1 || val > 1024 {
		return ListSlidesV1RequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [1, 1024]",
		}
	}

	// no validation rules for Offset

	return nil
}

// ListSlidesV1RequestValidationError is the validation error returned by
// ListSlidesV1Request.Validate if the designated constraints aren't met.
type ListSlidesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlidesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlidesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlidesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlidesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlidesV1RequestValidationError) ErrorName() string {
	return "ListSlidesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlidesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlidesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlidesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlidesV1RequestValidationError{}

// Validate checks the field values on ListSlidesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSlidesV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSlides() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSlidesV1ResponseValidationError{
					field:  fmt.Sprintf("Slides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSlidesV1ResponseValidationError is the validation error returned by
// ListSlidesV1Response.Validate if the designated constraints aren't met.
type ListSlidesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSlidesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSlidesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSlidesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSlidesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSlidesV1ResponseValidationError) ErrorName() string {
	return "ListSlidesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSlidesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSlidesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSlidesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSlidesV1ResponseValidationError{}

// Validate checks the field values on RemoveSlideV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSlideV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlideId() < 1 {
		return RemoveSlideV1RequestValidationError{
			field:  "SlideId",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// RemoveSlideV1RequestValidationError is the validation error returned by
// RemoveSlideV1Request.Validate if the designated constraints aren't met.
type RemoveSlideV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSlideV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSlideV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSlideV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSlideV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSlideV1RequestValidationError) ErrorName() string {
	return "RemoveSlideV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSlideV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSlideV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSlideV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSlideV1RequestValidationError{}

// Validate checks the field values on RemoveSlideV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSlideV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveSlideV1ResponseValidationError is the validation error returned by
// RemoveSlideV1Response.Validate if the designated constraints aren't met.
type RemoveSlideV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSlideV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSlideV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSlideV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSlideV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSlideV1ResponseValidationError) ErrorName() string {
	return "RemoveSlideV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSlideV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSlideV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSlideV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSlideV1ResponseValidationError{}

// Validate checks the field values on NewSlide with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NewSlide) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPresentationId() < 1 {
		return NewSlideValidationError{
			field:  "PresentationId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetNumber() < 1 {
		return NewSlideValidationError{
			field:  "Number",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for Type

	return nil
}

// NewSlideValidationError is the validation error returned by
// NewSlide.Validate if the designated constraints aren't met.
type NewSlideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewSlideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewSlideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewSlideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewSlideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewSlideValidationError) ErrorName() string { return "NewSlideValidationError" }

// Error satisfies the builtin error interface
func (e NewSlideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewSlide.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewSlideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewSlideValidationError{}

// Validate checks the field values on Slide with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Slide) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlideId() < 1 {
		return SlideValidationError{
			field:  "SlideId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPresentationId() < 1 {
		return SlideValidationError{
			field:  "PresentationId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetNumber() < 1 {
		return SlideValidationError{
			field:  "Number",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for Type

	return nil
}

// SlideValidationError is the validation error returned by Slide.Validate if
// the designated constraints aren't met.
type SlideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlideValidationError) ErrorName() string { return "SlideValidationError" }

// Error satisfies the builtin error interface
func (e SlideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlide.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlideValidationError{}
