// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-presentation-api/ocp-presentation-api.proto

package ocp_presentation_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePresentationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePresentationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreatePresentationV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLessonId() <= 0 {
		return CreatePresentationV1RequestValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// CreatePresentationV1RequestValidationError is the validation error returned
// by CreatePresentationV1Request.Validate if the designated constraints
// aren't met.
type CreatePresentationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePresentationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePresentationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePresentationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePresentationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePresentationV1RequestValidationError) ErrorName() string {
	return "CreatePresentationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePresentationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePresentationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePresentationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePresentationV1RequestValidationError{}

// Validate checks the field values on CreatePresentationV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePresentationV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PresentationId

	return nil
}

// CreatePresentationV1ResponseValidationError is the validation error returned
// by CreatePresentationV1Response.Validate if the designated constraints
// aren't met.
type CreatePresentationV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePresentationV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePresentationV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePresentationV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePresentationV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePresentationV1ResponseValidationError) ErrorName() string {
	return "CreatePresentationV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePresentationV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePresentationV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePresentationV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePresentationV1ResponseValidationError{}

// Validate checks the field values on DescribePresentationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePresentationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPresentationId() <= 0 {
		return DescribePresentationV1RequestValidationError{
			field:  "PresentationId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribePresentationV1RequestValidationError is the validation error
// returned by DescribePresentationV1Request.Validate if the designated
// constraints aren't met.
type DescribePresentationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePresentationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePresentationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePresentationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePresentationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePresentationV1RequestValidationError) ErrorName() string {
	return "DescribePresentationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePresentationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePresentationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePresentationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePresentationV1RequestValidationError{}

// Validate checks the field values on DescribePresentationV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePresentationV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPresentation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePresentationV1ResponseValidationError{
				field:  "Presentation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribePresentationV1ResponseValidationError is the validation error
// returned by DescribePresentationV1Response.Validate if the designated
// constraints aren't met.
type DescribePresentationV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePresentationV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePresentationV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePresentationV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePresentationV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePresentationV1ResponseValidationError) ErrorName() string {
	return "DescribePresentationV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePresentationV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePresentationV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePresentationV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePresentationV1ResponseValidationError{}

// Validate checks the field values on ListPresentationsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPresentationsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListPresentationsV1RequestValidationError is the validation error returned
// by ListPresentationsV1Request.Validate if the designated constraints aren't met.
type ListPresentationsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresentationsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresentationsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresentationsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresentationsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresentationsV1RequestValidationError) ErrorName() string {
	return "ListPresentationsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresentationsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresentationsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresentationsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresentationsV1RequestValidationError{}

// Validate checks the field values on ListPresentationsV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPresentationsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPresentations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresentationsV1ResponseValidationError{
					field:  fmt.Sprintf("Presentations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPresentationsV1ResponseValidationError is the validation error returned
// by ListPresentationsV1Response.Validate if the designated constraints
// aren't met.
type ListPresentationsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresentationsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresentationsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresentationsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresentationsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresentationsV1ResponseValidationError) ErrorName() string {
	return "ListPresentationsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresentationsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresentationsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresentationsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresentationsV1ResponseValidationError{}

// Validate checks the field values on RemovePresentationV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePresentationV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPresentationId() <= 0 {
		return RemovePresentationV1RequestValidationError{
			field:  "PresentationId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemovePresentationV1RequestValidationError is the validation error returned
// by RemovePresentationV1Request.Validate if the designated constraints
// aren't met.
type RemovePresentationV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePresentationV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePresentationV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePresentationV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePresentationV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePresentationV1RequestValidationError) ErrorName() string {
	return "RemovePresentationV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePresentationV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePresentationV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePresentationV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePresentationV1RequestValidationError{}

// Validate checks the field values on RemovePresentationV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePresentationV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemovePresentationV1ResponseValidationError is the validation error returned
// by RemovePresentationV1Response.Validate if the designated constraints
// aren't met.
type RemovePresentationV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePresentationV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePresentationV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePresentationV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePresentationV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePresentationV1ResponseValidationError) ErrorName() string {
	return "RemovePresentationV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePresentationV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePresentationV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePresentationV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePresentationV1ResponseValidationError{}

// Validate checks the field values on Presentation with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Presentation) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPresentationId() <= 0 {
		return PresentationValidationError{
			field:  "PresentationId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return PresentationValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetLessonId() <= 0 {
		return PresentationValidationError{
			field:  "LessonId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// PresentationValidationError is the validation error returned by
// Presentation.Validate if the designated constraints aren't met.
type PresentationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresentationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresentationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresentationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresentationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresentationValidationError) ErrorName() string { return "PresentationValidationError" }

// Error satisfies the builtin error interface
func (e PresentationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresentation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresentationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresentationValidationError{}
