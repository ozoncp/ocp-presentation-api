syntax = "proto3";

import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

package ocp.slide.api;

option go_package = "gihtub.com/ozoncp/ocp-presentation-api/pkg/ocp-slide-api";

service SlideAPI {
	// Creates a new slide
	rpc CreateSlideV1(CreateSlideV1Request) returns (CreateSlideV1Response) {
		option (google.api.http) = {
			post: "/v1/slide"
		};
	}

	// Creates new slides
	rpc MultiCreateSlidesV1(MultiCreateSlidesV1Request) returns (MultiCreateSlidesV1Response) {
		option (google.api.http) = {
			post: "/v1/slides"
		};
	}

	// Updates a slide
    rpc UpdateSlideV1(UpdateSlideV1Request) returns (UpdateSlideV1Response) {
        option (google.api.http) = {
            post: "/v1/slide"
        };
    }

	// Returns a slide by id
	rpc DescribeSlideV1(DescribeSlideV1Request) returns (DescribeSlideV1Response) {
		option (google.api.http) = {
			get: "/v1/slide/{slide_id}"
		};
	}

	// Returns a list of slides
	rpc ListSlidesV1(ListSlidesV1Request) returns (ListSlidesV1Response) {
		option (google.api.http) = {
			get: "/v1/slides"
		};
	}

	// Removes a slide by id
	rpc RemoveSlideV1(RemoveSlideV1Request) returns (RemoveSlideV1Response) {
		option (google.api.http) = {
			delete: "/v1/slide/{slide_id}"
		};
	}
}

///////////////////////////////////////////////////////////////////////////////

message CreateSlideV1Request {
	NewSlide slide = 1 [(validate.rules).message.required = true];
}

message CreateSlideV1Response {
	uint64 slide_id = 1;
}

///////////////////////////////////////////////////////////////////////////////

message MultiCreateSlidesV1Request {
	repeated NewSlide slides = 1 [(validate.rules).repeated = {min_items: 1, max_items: 1024}];
}

message MultiCreateSlidesV1Response {
	int64 number_of_created_slides = 1;
}

///////////////////////////////////////////////////////////////////////////////

message UpdateSlideV1Request {
	Slide slide = 1 [(validate.rules).message.required = true];
}

message UpdateSlideV1Response {
	bool found = 1;
}

///////////////////////////////////////////////////////////////////////////////

message DescribeSlideV1Request {
	uint64 slide_id = 1 [(validate.rules).uint64.gte = 1];
}

message DescribeSlideV1Response {
	Slide slide = 1;
}

///////////////////////////////////////////////////////////////////////////////

message ListSlidesV1Request {
	uint64 limit = 1 [(validate.rules).uint64 = {gte:1, lte: 1024}];
	uint64 offset = 2;
}

message ListSlidesV1Response {
	repeated Slide slides = 1;
}

///////////////////////////////////////////////////////////////////////////////

message RemoveSlideV1Request {
	uint64 slide_id = 1 [(validate.rules).uint64.gte = 1];
}

message RemoveSlideV1Response {
	bool found = 1;
}

///////////////////////////////////////////////////////////////////////////////

enum SlideType {
	Question = 0;
	Video = 1;
	Document = 2;
	Task = 3;
}

message NewSlide {
	uint64 presentation_id = 1 [(validate.rules).uint64.gte = 1];
	uint64 number = 2 [(validate.rules).uint64.gte = 1];
	SlideType type = 3;
}

message Slide {
	uint64 slide_id = 1 [(validate.rules).uint64.gte = 1];
	uint64 presentation_id = 2 [(validate.rules).uint64.gte = 1];
	uint64 number = 3 [(validate.rules).uint64.gte = 1];
	SlideType type = 4;
}
